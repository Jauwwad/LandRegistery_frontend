{"ast":null,"code":"import axios from 'axios';\n\n// Create axios instance with base configuration\nconst api = axios.create({\n  baseURL: 'https://landregistry-backend.onrender.com/api',\n  timeout: 10000\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle errors\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Land API\nexport const landAPI = {\n  // Get all lands with filters\n  getLands: (params = {}) => api.get('/lands/', {\n    params\n  }),\n  // Get specific land\n  getLand: id => api.get(`/lands/${id}`),\n  // Register new land\n  registerLand: landData => api.post('/lands/', landData),\n  // Register land on blockchain\n  registerOnBlockchain: id => api.post(`/lands/${id}/register-blockchain`),\n  // Transfer land\n  transferLand: (id, transferData) => api.post(`/lands/${id}/transfer`, transferData),\n  // Verify land (admin only)\n  verifyLand: (id, verificationData) => api.post(`/lands/${id}/verify`, verificationData),\n  // Get map data\n  getMapData: bounds => api.get('/lands/map-data', {\n    params: {\n      bounds\n    }\n  }),\n  // Get statistics\n  getStatistics: () => api.get('/lands/statistics')\n};\n\n// Admin API\nexport const adminAPI = {\n  // Dashboard data\n  getDashboard: () => api.get('/admin/dashboard'),\n  // User management\n  getUsers: (params = {}) => api.get('/admin/users', {\n    params\n  }),\n  getUser: id => api.get(`/admin/users/${id}`),\n  toggleUserStatus: id => api.post(`/admin/users/${id}/toggle-status`),\n  // Land management\n  getPendingLands: (params = {}) => api.get('/admin/lands/pending', {\n    params\n  }),\n  reviewLand: (id, reviewData) => api.post(`/admin/lands/${id}/review`, reviewData),\n  // Transfer management\n  getTransfers: (params = {}) => api.get('/admin/transfers', {\n    params\n  }),\n  // Blockchain status\n  getBlockchainStatus: () => api.get('/admin/blockchain/status'),\n  // Reports\n  getLandDistributionReport: () => api.get('/admin/reports/land-distribution'),\n  // System info\n  getSystemInfo: () => api.get('/admin/system/info')\n};\n\n// Auth API\nexport const authAPI = {\n  login: credentials => api.post('/auth/login', credentials),\n  register: userData => api.post('/auth/register', userData),\n  demoLogin: type => api.post('/auth/demo-login', {\n    type\n  }),\n  getProfile: () => api.get('/auth/profile'),\n  updateProfile: profileData => api.put('/auth/profile', profileData),\n  changePassword: passwordData => api.post('/auth/change-password', passwordData)\n};\n\n// Utility functions\nexport const formatCurrency = amount => {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD'\n  }).format(amount);\n};\nexport const formatArea = area => {\n  return `${area === null || area === void 0 ? void 0 : area.toLocaleString()} sq m`;\n};\nexport const formatDate = dateString => {\n  return new Date(dateString).toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric'\n  });\n};\nexport const getStatusColor = status => {\n  switch (status) {\n    case 'verified':\n      return 'success';\n    case 'pending':\n      return 'warning';\n    case 'rejected':\n      return 'error';\n    default:\n      return 'default';\n  }\n};\nexport const getPropertyTypeColor = type => {\n  switch (type) {\n    case 'residential':\n      return '#2196f3';\n    case 'commercial':\n      return '#ff9800';\n    case 'agricultural':\n      return '#4caf50';\n    default:\n      return '#9e9e9e';\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","timeout","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","landAPI","getLands","params","get","getLand","id","registerLand","landData","post","registerOnBlockchain","transferLand","transferData","verifyLand","verificationData","getMapData","bounds","getStatistics","adminAPI","getDashboard","getUsers","getUser","toggleUserStatus","getPendingLands","reviewLand","reviewData","getTransfers","getBlockchainStatus","getLandDistributionReport","getSystemInfo","authAPI","login","credentials","register","userData","demoLogin","type","getProfile","updateProfile","profileData","put","changePassword","passwordData","formatCurrency","amount","Intl","NumberFormat","style","currency","format","formatArea","area","toLocaleString","formatDate","dateString","Date","toLocaleDateString","year","month","day","getStatusColor","getPropertyTypeColor"],"sources":["C:/Users/jauww/OneDrive/Desktop/Land_/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Create axios instance with base configuration\nconst api = axios.create({\n  baseURL: 'https://landregistry-backend.onrender.com/api',\n  timeout: 10000,\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor to handle errors\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Land API\nexport const landAPI = {\n  // Get all lands with filters\n  getLands: (params = {}) => api.get('/lands/', { params }),\n  \n  // Get specific land\n  getLand: (id) => api.get(`/lands/${id}`),\n  \n  // Register new land\n  registerLand: (landData) => api.post('/lands/', landData),\n  \n  // Register land on blockchain\n  registerOnBlockchain: (id) => api.post(`/lands/${id}/register-blockchain`),\n  \n  // Transfer land\n  transferLand: (id, transferData) => api.post(`/lands/${id}/transfer`, transferData),\n  \n  // Verify land (admin only)\n  verifyLand: (id, verificationData) => api.post(`/lands/${id}/verify`, verificationData),\n  \n  // Get map data\n  getMapData: (bounds) => api.get('/lands/map-data', { params: { bounds } }),\n  \n  // Get statistics\n  getStatistics: () => api.get('/lands/statistics'),\n};\n\n// Admin API\nexport const adminAPI = {\n  // Dashboard data\n  getDashboard: () => api.get('/admin/dashboard'),\n  \n  // User management\n  getUsers: (params = {}) => api.get('/admin/users', { params }),\n  getUser: (id) => api.get(`/admin/users/${id}`),\n  toggleUserStatus: (id) => api.post(`/admin/users/${id}/toggle-status`),\n  \n  // Land management\n  getPendingLands: (params = {}) => api.get('/admin/lands/pending', { params }),\n  reviewLand: (id, reviewData) => api.post(`/admin/lands/${id}/review`, reviewData),\n  \n  // Transfer management\n  getTransfers: (params = {}) => api.get('/admin/transfers', { params }),\n  \n  // Blockchain status\n  getBlockchainStatus: () => api.get('/admin/blockchain/status'),\n  \n  // Reports\n  getLandDistributionReport: () => api.get('/admin/reports/land-distribution'),\n  \n  // System info\n  getSystemInfo: () => api.get('/admin/system/info'),\n};\n\n// Auth API\nexport const authAPI = {\n  login: (credentials) => api.post('/auth/login', credentials),\n  register: (userData) => api.post('/auth/register', userData),\n  demoLogin: (type) => api.post('/auth/demo-login', { type }),\n  getProfile: () => api.get('/auth/profile'),\n  updateProfile: (profileData) => api.put('/auth/profile', profileData),\n  changePassword: (passwordData) => api.post('/auth/change-password', passwordData),\n};\n\n// Utility functions\nexport const formatCurrency = (amount) => {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n  }).format(amount);\n};\n\nexport const formatArea = (area) => {\n  return `${area?.toLocaleString()} sq m`;\n};\n\nexport const formatDate = (dateString) => {\n  return new Date(dateString).toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n  });\n};\n\nexport const getStatusColor = (status) => {\n  switch (status) {\n    case 'verified':\n      return 'success';\n    case 'pending':\n      return 'warning';\n    case 'rejected':\n      return 'error';\n    default:\n      return 'default';\n  }\n};\n\nexport const getPropertyTypeColor = (type) => {\n  switch (type) {\n    case 'residential':\n      return '#2196f3';\n    case 'commercial':\n      return '#ff9800';\n    case 'agricultural':\n      return '#4caf50';\n    default:\n      return '#9e9e9e';\n  }\n};\n\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE,+CAA+C;EACxDC,OAAO,EAAE;AACX,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACI,OAAO,CAACC,aAAa,GAAG,UAAUJ,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAM,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAb,GAAG,CAACI,YAAY,CAACY,QAAQ,CAACV,GAAG,CAC1BU,QAAQ,IAAKA,QAAQ,EACrBH,KAAK,IAAK;EAAA,IAAAI,eAAA;EACT,IAAI,EAAAA,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAClCT,YAAY,CAACU,UAAU,CAAC,OAAO,CAAC;IAChCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;EACA,OAAOR,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMU,OAAO,GAAG;EACrB;EACAC,QAAQ,EAAEA,CAACC,MAAM,GAAG,CAAC,CAAC,KAAKzB,GAAG,CAAC0B,GAAG,CAAC,SAAS,EAAE;IAAED;EAAO,CAAC,CAAC;EAEzD;EACAE,OAAO,EAAGC,EAAE,IAAK5B,GAAG,CAAC0B,GAAG,CAAC,UAAUE,EAAE,EAAE,CAAC;EAExC;EACAC,YAAY,EAAGC,QAAQ,IAAK9B,GAAG,CAAC+B,IAAI,CAAC,SAAS,EAAED,QAAQ,CAAC;EAEzD;EACAE,oBAAoB,EAAGJ,EAAE,IAAK5B,GAAG,CAAC+B,IAAI,CAAC,UAAUH,EAAE,sBAAsB,CAAC;EAE1E;EACAK,YAAY,EAAEA,CAACL,EAAE,EAAEM,YAAY,KAAKlC,GAAG,CAAC+B,IAAI,CAAC,UAAUH,EAAE,WAAW,EAAEM,YAAY,CAAC;EAEnF;EACAC,UAAU,EAAEA,CAACP,EAAE,EAAEQ,gBAAgB,KAAKpC,GAAG,CAAC+B,IAAI,CAAC,UAAUH,EAAE,SAAS,EAAEQ,gBAAgB,CAAC;EAEvF;EACAC,UAAU,EAAGC,MAAM,IAAKtC,GAAG,CAAC0B,GAAG,CAAC,iBAAiB,EAAE;IAAED,MAAM,EAAE;MAAEa;IAAO;EAAE,CAAC,CAAC;EAE1E;EACAC,aAAa,EAAEA,CAAA,KAAMvC,GAAG,CAAC0B,GAAG,CAAC,mBAAmB;AAClD,CAAC;;AAED;AACA,OAAO,MAAMc,QAAQ,GAAG;EACtB;EACAC,YAAY,EAAEA,CAAA,KAAMzC,GAAG,CAAC0B,GAAG,CAAC,kBAAkB,CAAC;EAE/C;EACAgB,QAAQ,EAAEA,CAACjB,MAAM,GAAG,CAAC,CAAC,KAAKzB,GAAG,CAAC0B,GAAG,CAAC,cAAc,EAAE;IAAED;EAAO,CAAC,CAAC;EAC9DkB,OAAO,EAAGf,EAAE,IAAK5B,GAAG,CAAC0B,GAAG,CAAC,gBAAgBE,EAAE,EAAE,CAAC;EAC9CgB,gBAAgB,EAAGhB,EAAE,IAAK5B,GAAG,CAAC+B,IAAI,CAAC,gBAAgBH,EAAE,gBAAgB,CAAC;EAEtE;EACAiB,eAAe,EAAEA,CAACpB,MAAM,GAAG,CAAC,CAAC,KAAKzB,GAAG,CAAC0B,GAAG,CAAC,sBAAsB,EAAE;IAAED;EAAO,CAAC,CAAC;EAC7EqB,UAAU,EAAEA,CAAClB,EAAE,EAAEmB,UAAU,KAAK/C,GAAG,CAAC+B,IAAI,CAAC,gBAAgBH,EAAE,SAAS,EAAEmB,UAAU,CAAC;EAEjF;EACAC,YAAY,EAAEA,CAACvB,MAAM,GAAG,CAAC,CAAC,KAAKzB,GAAG,CAAC0B,GAAG,CAAC,kBAAkB,EAAE;IAAED;EAAO,CAAC,CAAC;EAEtE;EACAwB,mBAAmB,EAAEA,CAAA,KAAMjD,GAAG,CAAC0B,GAAG,CAAC,0BAA0B,CAAC;EAE9D;EACAwB,yBAAyB,EAAEA,CAAA,KAAMlD,GAAG,CAAC0B,GAAG,CAAC,kCAAkC,CAAC;EAE5E;EACAyB,aAAa,EAAEA,CAAA,KAAMnD,GAAG,CAAC0B,GAAG,CAAC,oBAAoB;AACnD,CAAC;;AAED;AACA,OAAO,MAAM0B,OAAO,GAAG;EACrBC,KAAK,EAAGC,WAAW,IAAKtD,GAAG,CAAC+B,IAAI,CAAC,aAAa,EAAEuB,WAAW,CAAC;EAC5DC,QAAQ,EAAGC,QAAQ,IAAKxD,GAAG,CAAC+B,IAAI,CAAC,gBAAgB,EAAEyB,QAAQ,CAAC;EAC5DC,SAAS,EAAGC,IAAI,IAAK1D,GAAG,CAAC+B,IAAI,CAAC,kBAAkB,EAAE;IAAE2B;EAAK,CAAC,CAAC;EAC3DC,UAAU,EAAEA,CAAA,KAAM3D,GAAG,CAAC0B,GAAG,CAAC,eAAe,CAAC;EAC1CkC,aAAa,EAAGC,WAAW,IAAK7D,GAAG,CAAC8D,GAAG,CAAC,eAAe,EAAED,WAAW,CAAC;EACrEE,cAAc,EAAGC,YAAY,IAAKhE,GAAG,CAAC+B,IAAI,CAAC,uBAAuB,EAAEiC,YAAY;AAClF,CAAC;;AAED;AACA,OAAO,MAAMC,cAAc,GAAIC,MAAM,IAAK;EACxC,OAAO,IAAIC,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;IACpCC,KAAK,EAAE,UAAU;IACjBC,QAAQ,EAAE;EACZ,CAAC,CAAC,CAACC,MAAM,CAACL,MAAM,CAAC;AACnB,CAAC;AAED,OAAO,MAAMM,UAAU,GAAIC,IAAI,IAAK;EAClC,OAAO,GAAGA,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEC,cAAc,CAAC,CAAC,OAAO;AACzC,CAAC;AAED,OAAO,MAAMC,UAAU,GAAIC,UAAU,IAAK;EACxC,OAAO,IAAIC,IAAI,CAACD,UAAU,CAAC,CAACE,kBAAkB,CAAC,OAAO,EAAE;IACtDC,IAAI,EAAE,SAAS;IACfC,KAAK,EAAE,OAAO;IACdC,GAAG,EAAE;EACP,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMC,cAAc,GAAIhE,MAAM,IAAK;EACxC,QAAQA,MAAM;IACZ,KAAK,UAAU;MACb,OAAO,SAAS;IAClB,KAAK,SAAS;MACZ,OAAO,SAAS;IAClB,KAAK,UAAU;MACb,OAAO,OAAO;IAChB;MACE,OAAO,SAAS;EACpB;AACF,CAAC;AAED,OAAO,MAAMiE,oBAAoB,GAAIzB,IAAI,IAAK;EAC5C,QAAQA,IAAI;IACV,KAAK,aAAa;MAChB,OAAO,SAAS;IAClB,KAAK,YAAY;MACf,OAAO,SAAS;IAClB,KAAK,cAAc;MACjB,OAAO,SAAS;IAClB;MACE,OAAO,SAAS;EACpB;AACF,CAAC;AAED,eAAe1D,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}